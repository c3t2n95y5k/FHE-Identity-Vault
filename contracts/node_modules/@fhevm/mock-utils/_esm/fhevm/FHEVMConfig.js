import { computeStorageLocation, getAddressesFromStorage } from "../ethers/storage.js";
import { assertFhevm } from "../utils/error.js";
/**
 * Retrieves the `FHEVMConfigStruct` from a smart contract that utilizes the FHEVM framework,
 * deployed at the given `contractAddress`.
 *
 * This function computes the storage slot corresponding to the `FHEVMConfigStruct` defined in
 * [`@fhevm/solidity/lib/Impl.sol`](https://github.com/zama-ai/fhevm-solidity/blob/main/lib/Impl.sol),
 * then reads the four consecutive addresses fields directly from storage.
 *
 * @param provider - A `MinimalProvider` that implements either `send` or `request` for JSON-RPC communication.
 * @param contractAddress - The on-chain address of the FHEVM contract to query.
 * @returns A Promise that resolves to the `FHEVMConfigStruct`.
 *
 * @throws If the computed storage slot does not match the expected constant layout, indicating a version or layout mismatch.
 */
export async function getFHEVMConfig(provider, contractAddress) {
    const fhevmConfigStorageLocation = computeStorageLocation("fhevm.storage.FHEVMConfig");
    assertFhevm(fhevmConfigStorageLocation === "0xed8d60e34876f751cc8b014c560745351147d9de11b9347c854e881b128ea600");
    /*
      See: @fhevm/solidity/config/ZamaConfig.sol and @fhevm/solidity/lib/Impl.sol
      
      struct FHEVMConfigStruct {
          address ACLAddress;
          address FHEVMExecutorAddress;
          address KMSVerifierAddress;
          address InputVerifierAddress;
      }
    */
    const addresses = await getAddressesFromStorage(provider, contractAddress, fhevmConfigStorageLocation, 4 /* number of addresses in the struct */);
    return {
        ACLAddress: addresses[0],
        FHEVMExecutorAddress: addresses[1],
        KMSVerifierAddress: addresses[2],
        InputVerifierAddress: addresses[3],
    };
}
//# sourceMappingURL=FHEVMConfig.js.map