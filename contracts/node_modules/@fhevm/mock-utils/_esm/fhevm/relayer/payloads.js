import { assertIsAddressProperty } from "../../utils/address.js";
import { assertIsArrayProperty, assertIsObjectProperty } from "../../utils/error.js";
import { assertIsStringArrayProperty, assertIsStringProperty } from "../../utils/string.js";
function _assertIsRelayerV1UserDecryptValidity(value) {
    const stringFields = ["durationDays", "startTimestamp"];
    assertIsStringProperty(value, stringFields, "RelayerV1UserDecryptValidity");
}
export function assertIsRelayerV1InputProofPayload(value) {
    const stringFields = [
        "contractAddress",
        "userAddress",
        "ciphertextWithInputVerification",
        "contractChainId",
    ];
    assertIsStringProperty(value, stringFields, "RelayerV1InputProofPayload");
}
export function assertIsRelayerV1InputProofResponse(value) {
    const keys = ["handles", "signatures"];
    assertIsStringArrayProperty(value, keys, "RelayerV1InputProofResponse");
}
export function assertIsRelayerV1PublicDecryptPayload(value) {
    const stringFields = ["ciphertextHandles"];
    assertIsStringArrayProperty(value, stringFields, "RelayerV1PublicDecryptPayload");
}
export function assertIsRelayerV1PublicDecryptResponse(value) {
    const arrayKeys = ["signatures"];
    const stringKeys = ["decrypted_value"];
    assertIsStringArrayProperty(value, arrayKeys, "RelayerV1PublicDecryptResponse");
    assertIsStringProperty(value, stringKeys, "RelayerV1PublicDecryptResponse");
}
export function assertIsRelayerV1UserDecryptPayload(value) {
    const arrayKeys = ["handleContractPairs", "contractAddresses"];
    const stringKeys = [
        "contractsChainId",
        "publicKey",
        "signature",
        "userAddress",
    ];
    const objectKeys = ["requestValidity"];
    assertIsStringProperty(value, stringKeys, "RelayerV1UserDecryptPayload");
    assertIsArrayProperty(value, arrayKeys, "RelayerV1UserDecryptPayload");
    assertIsObjectProperty(value, objectKeys, "RelayerV1UserDecryptPayload");
    _assertIsRelayerV1UserDecryptValidity(value.requestValidity);
}
export function assertIsRelayerMetadata(value) {
    const keys = [
        "ACLAddress",
        "FHEVMExecutorAddress",
        "InputVerifierAddress",
        "KMSVerifierAddress",
        "relayerSignerAddress",
    ];
    assertIsAddressProperty(value, keys, "RelayerMetadata");
}
//# sourceMappingURL=payloads.js.map