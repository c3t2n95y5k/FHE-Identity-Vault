/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEIdentityVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateAccessLevel"
      | "createIdentity"
      | "getEncryptedNetWorth"
      | "getPlaintextData"
      | "hasIdentity"
      | "identities"
      | "protocolId"
      | "totalIdentities"
      | "updateIdentity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "IdentityCreated" | "IdentityUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateAccessLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentity",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedNetWorth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlaintextData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasIdentity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "identities",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalIdentities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateIdentity",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAccessLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedNetWorth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlaintextData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identities", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalIdentities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIdentity",
    data: BytesLike
  ): Result;
}

export namespace IdentityCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    domicile: BigNumberish,
    tier: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    domicile: bigint,
    tier: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    domicile: bigint;
    tier: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityUpdatedEvent {
  export type InputTuple = [owner: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [owner: string, timestamp: bigint];
  export interface OutputObject {
    owner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEIdentityVault extends BaseContract {
  connect(runner?: ContractRunner | null): FHEIdentityVault;
  waitForDeployment(): Promise<this>;

  interface: FHEIdentityVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateAccessLevel: TypedContractMethod<[], [string], "nonpayable">;

  createIdentity: TypedContractMethod<
    [
      encryptedNetWorth: BytesLike,
      proof: BytesLike,
      domicile: BigNumberish,
      tier: BigNumberish,
      pep: BigNumberish,
      watchlist: BigNumberish,
      riskScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEncryptedNetWorth: TypedContractMethod<[], [string], "view">;

  getPlaintextData: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        domicile: bigint;
        tier: bigint;
        pep: bigint;
        watchlist: bigint;
        riskScore: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  hasIdentity: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  identities: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        owner: string;
        encryptedNetWorth: string;
        domicile: bigint;
        tier: bigint;
        pep: bigint;
        watchlist: bigint;
        riskScore: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  totalIdentities: TypedContractMethod<[], [bigint], "view">;

  updateIdentity: TypedContractMethod<
    [
      encryptedNetWorth: BytesLike,
      proof: BytesLike,
      domicile: BigNumberish,
      tier: BigNumberish,
      pep: BigNumberish,
      watchlist: BigNumberish,
      riskScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateAccessLevel"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createIdentity"
  ): TypedContractMethod<
    [
      encryptedNetWorth: BytesLike,
      proof: BytesLike,
      domicile: BigNumberish,
      tier: BigNumberish,
      pep: BigNumberish,
      watchlist: BigNumberish,
      riskScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedNetWorth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPlaintextData"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        domicile: bigint;
        tier: bigint;
        pep: bigint;
        watchlist: bigint;
        riskScore: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasIdentity"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "identities"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        owner: string;
        encryptedNetWorth: string;
        domicile: bigint;
        tier: bigint;
        pep: bigint;
        watchlist: bigint;
        riskScore: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalIdentities"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateIdentity"
  ): TypedContractMethod<
    [
      encryptedNetWorth: BytesLike,
      proof: BytesLike,
      domicile: BigNumberish,
      tier: BigNumberish,
      pep: BigNumberish,
      watchlist: BigNumberish,
      riskScore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "IdentityCreated"
  ): TypedContractEvent<
    IdentityCreatedEvent.InputTuple,
    IdentityCreatedEvent.OutputTuple,
    IdentityCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IdentityUpdated"
  ): TypedContractEvent<
    IdentityUpdatedEvent.InputTuple,
    IdentityUpdatedEvent.OutputTuple,
    IdentityUpdatedEvent.OutputObject
  >;

  filters: {
    "IdentityCreated(address,uint32,uint16,uint64)": TypedContractEvent<
      IdentityCreatedEvent.InputTuple,
      IdentityCreatedEvent.OutputTuple,
      IdentityCreatedEvent.OutputObject
    >;
    IdentityCreated: TypedContractEvent<
      IdentityCreatedEvent.InputTuple,
      IdentityCreatedEvent.OutputTuple,
      IdentityCreatedEvent.OutputObject
    >;

    "IdentityUpdated(address,uint64)": TypedContractEvent<
      IdentityUpdatedEvent.InputTuple,
      IdentityUpdatedEvent.OutputTuple,
      IdentityUpdatedEvent.OutputObject
    >;
    IdentityUpdated: TypedContractEvent<
      IdentityUpdatedEvent.InputTuple,
      IdentityUpdatedEvent.OutputTuple,
      IdentityUpdatedEvent.OutputObject
    >;
  };
}
