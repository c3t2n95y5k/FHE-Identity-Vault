/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFHEVoting {
  export type VotingConfigStruct = {
    name: string;
    description: string;
    voteType: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    quorum: BigNumberish;
    whitelistEnabled: boolean;
    maxVotersCount: BigNumberish;
  };

  export type VotingConfigStructOutput = [
    name: string,
    description: string,
    voteType: bigint,
    startTime: bigint,
    endTime: bigint,
    quorum: bigint,
    whitelistEnabled: boolean,
    maxVotersCount: bigint
  ] & {
    name: string;
    description: string;
    voteType: bigint;
    startTime: bigint;
    endTime: bigint;
    quorum: bigint;
    whitelistEnabled: boolean;
    maxVotersCount: bigint;
  };

  export type VoterInfoStruct = {
    hasVoted: boolean;
    isWhitelisted: boolean;
    votingPower: BigNumberish;
    encryptedChoice: BytesLike;
    voteTimestamp: BigNumberish;
  };

  export type VoterInfoStructOutput = [
    hasVoted: boolean,
    isWhitelisted: boolean,
    votingPower: bigint,
    encryptedChoice: string,
    voteTimestamp: bigint
  ] & {
    hasVoted: boolean;
    isWhitelisted: boolean;
    votingPower: bigint;
    encryptedChoice: string;
    voteTimestamp: bigint;
  };
}

export interface IFHEQuadraticVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allocateCredits"
      | "calculateQuadraticCost"
      | "castQuadraticVote"
      | "castVote"
      | "castWeightedVote"
      | "createVoting"
      | "endVoting"
      | "getDecryptedResults"
      | "getTotalVoters"
      | "getVoterCredits"
      | "getVoterInfo"
      | "getVotingConfig"
      | "getVotingStatus"
      | "getWinningOption"
      | "isQuorumReached"
      | "reencryptVote"
      | "requestDecryption"
      | "startVoting"
      | "verifyVoteIntegrity"
      | "whitelistVoters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreditsAllocated"
      | "QuorumReached"
      | "ResultsDecrypted"
      | "VoteCast"
      | "VoterWhitelisted"
      | "VotingCreated"
      | "VotingStatusChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allocateCredits",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateQuadraticCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castQuadraticVote",
    values: [BigNumberish, BytesLike[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castWeightedVote",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createVoting",
    values: [IFHEVoting.VotingConfigStruct, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "endVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptedResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterCredits",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuorumReached",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reencryptVote",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVoteIntegrity",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistVoters",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateQuadraticCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castQuadraticVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castWeightedVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptedResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuorumReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reencryptVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyVoteIntegrity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistVoters",
    data: BytesLike
  ): Result;
}

export namespace CreditsAllocatedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    voter: AddressLike,
    creditsUsed: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    voter: string,
    creditsUsed: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    voter: string;
    creditsUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumReachedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    totalVotes: BigNumberish,
    quorum: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    totalVotes: bigint,
    quorum: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    totalVotes: bigint;
    quorum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultsDecryptedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    results: BigNumberish[],
    totalVotes: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    results: bigint[],
    totalVotes: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    results: bigint[];
    totalVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    voter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    voter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    voter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterWhitelistedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    voter: AddressLike,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    voter: string,
    votingPower: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    voter: string;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingCreatedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    name: string,
    voteType: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    name: string,
    voteType: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    name: string;
    voteType: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStatusChangedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFHEQuadraticVoting extends BaseContract {
  connect(runner?: ContractRunner | null): IFHEQuadraticVoting;
  waitForDeployment(): Promise<this>;

  interface: IFHEQuadraticVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allocateCredits: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, credits: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateQuadraticCost: TypedContractMethod<
    [votes: BigNumberish],
    [bigint],
    "view"
  >;

  castQuadraticVote: TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVotes: BytesLike[],
      credits: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [votingId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  castWeightedVote: TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVote: BytesLike,
      weight: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createVoting: TypedContractMethod<
    [
      config: IFHEVoting.VotingConfigStruct,
      optionNames: string[],
      optionDescriptions: string[]
    ],
    [bigint],
    "nonpayable"
  >;

  endVoting: TypedContractMethod<
    [votingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDecryptedResults: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTotalVoters: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint],
    "view"
  >;

  getVoterCredits: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  getVoterInfo: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike],
    [IFHEVoting.VoterInfoStructOutput],
    "view"
  >;

  getVotingConfig: TypedContractMethod<
    [votingId: BigNumberish],
    [IFHEVoting.VotingConfigStructOutput],
    "view"
  >;

  getVotingStatus: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint],
    "view"
  >;

  getWinningOption: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint],
    "view"
  >;

  isQuorumReached: TypedContractMethod<
    [votingId: BigNumberish],
    [boolean],
    "view"
  >;

  reencryptVote: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, publicKey: BytesLike],
    [string],
    "view"
  >;

  requestDecryption: TypedContractMethod<
    [votingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  startVoting: TypedContractMethod<
    [votingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifyVoteIntegrity: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, proof: BytesLike],
    [boolean],
    "view"
  >;

  whitelistVoters: TypedContractMethod<
    [
      votingId: BigNumberish,
      voters: AddressLike[],
      votingPowers: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allocateCredits"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, credits: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateQuadraticCost"
  ): TypedContractMethod<[votes: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "castQuadraticVote"
  ): TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVotes: BytesLike[],
      credits: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [votingId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castWeightedVote"
  ): TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVote: BytesLike,
      weight: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVoting"
  ): TypedContractMethod<
    [
      config: IFHEVoting.VotingConfigStruct,
      optionNames: string[],
      optionDescriptions: string[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[votingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDecryptedResults"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalVoters"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterCredits"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterInfo"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike],
    [IFHEVoting.VoterInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingConfig"
  ): TypedContractMethod<
    [votingId: BigNumberish],
    [IFHEVoting.VotingConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingStatus"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWinningOption"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isQuorumReached"
  ): TypedContractMethod<[votingId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "reencryptVote"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, publicKey: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestDecryption"
  ): TypedContractMethod<[votingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<[votingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyVoteIntegrity"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, proof: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelistVoters"
  ): TypedContractMethod<
    [
      votingId: BigNumberish,
      voters: AddressLike[],
      votingPowers: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CreditsAllocated"
  ): TypedContractEvent<
    CreditsAllocatedEvent.InputTuple,
    CreditsAllocatedEvent.OutputTuple,
    CreditsAllocatedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumReached"
  ): TypedContractEvent<
    QuorumReachedEvent.InputTuple,
    QuorumReachedEvent.OutputTuple,
    QuorumReachedEvent.OutputObject
  >;
  getEvent(
    key: "ResultsDecrypted"
  ): TypedContractEvent<
    ResultsDecryptedEvent.InputTuple,
    ResultsDecryptedEvent.OutputTuple,
    ResultsDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterWhitelisted"
  ): TypedContractEvent<
    VoterWhitelistedEvent.InputTuple,
    VoterWhitelistedEvent.OutputTuple,
    VoterWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "VotingCreated"
  ): TypedContractEvent<
    VotingCreatedEvent.InputTuple,
    VotingCreatedEvent.OutputTuple,
    VotingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStatusChanged"
  ): TypedContractEvent<
    VotingStatusChangedEvent.InputTuple,
    VotingStatusChangedEvent.OutputTuple,
    VotingStatusChangedEvent.OutputObject
  >;

  filters: {
    "CreditsAllocated(uint256,address,uint256)": TypedContractEvent<
      CreditsAllocatedEvent.InputTuple,
      CreditsAllocatedEvent.OutputTuple,
      CreditsAllocatedEvent.OutputObject
    >;
    CreditsAllocated: TypedContractEvent<
      CreditsAllocatedEvent.InputTuple,
      CreditsAllocatedEvent.OutputTuple,
      CreditsAllocatedEvent.OutputObject
    >;

    "QuorumReached(uint256,uint256,uint256)": TypedContractEvent<
      QuorumReachedEvent.InputTuple,
      QuorumReachedEvent.OutputTuple,
      QuorumReachedEvent.OutputObject
    >;
    QuorumReached: TypedContractEvent<
      QuorumReachedEvent.InputTuple,
      QuorumReachedEvent.OutputTuple,
      QuorumReachedEvent.OutputObject
    >;

    "ResultsDecrypted(uint256,uint256[],uint256)": TypedContractEvent<
      ResultsDecryptedEvent.InputTuple,
      ResultsDecryptedEvent.OutputTuple,
      ResultsDecryptedEvent.OutputObject
    >;
    ResultsDecrypted: TypedContractEvent<
      ResultsDecryptedEvent.InputTuple,
      ResultsDecryptedEvent.OutputTuple,
      ResultsDecryptedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterWhitelisted(uint256,address,uint256)": TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;
    VoterWhitelisted: TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;

    "VotingCreated(uint256,string,uint8,uint256,uint256)": TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;
    VotingCreated: TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;

    "VotingStatusChanged(uint256,uint8,uint8)": TypedContractEvent<
      VotingStatusChangedEvent.InputTuple,
      VotingStatusChangedEvent.OutputTuple,
      VotingStatusChangedEvent.OutputObject
    >;
    VotingStatusChanged: TypedContractEvent<
      VotingStatusChangedEvent.InputTuple,
      VotingStatusChangedEvent.OutputTuple,
      VotingStatusChangedEvent.OutputObject
    >;
  };
}
