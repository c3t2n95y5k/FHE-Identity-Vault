/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFHEVoting {
  export type VotingConfigStruct = {
    name: string;
    description: string;
    voteType: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    quorum: BigNumberish;
    whitelistEnabled: boolean;
    maxVotersCount: BigNumberish;
  };

  export type VotingConfigStructOutput = [
    name: string,
    description: string,
    voteType: bigint,
    startTime: bigint,
    endTime: bigint,
    quorum: bigint,
    whitelistEnabled: boolean,
    maxVotersCount: bigint
  ] & {
    name: string;
    description: string;
    voteType: bigint;
    startTime: bigint;
    endTime: bigint;
    quorum: bigint;
    whitelistEnabled: boolean;
    maxVotersCount: bigint;
  };
}

export declare namespace IFHEGovernance {
  export type ProposalStruct = {
    id: BigNumberish;
    proposer: AddressLike;
    ipfsHash: string;
    votingId: BigNumberish;
    executed: boolean;
    executionTime: BigNumberish;
    callData: BytesLike;
    target: AddressLike;
  };

  export type ProposalStructOutput = [
    id: bigint,
    proposer: string,
    ipfsHash: string,
    votingId: bigint,
    executed: boolean,
    executionTime: bigint,
    callData: string,
    target: string
  ] & {
    id: bigint;
    proposer: string;
    ipfsHash: string;
    votingId: bigint;
    executed: boolean;
    executionTime: bigint;
    callData: string;
    target: string;
  };
}

export interface IFHEGovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelProposal"
      | "createProposal"
      | "executeProposal"
      | "getProposal"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated" | "ProposalExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, AddressLike, BytesLike, IFHEVoting.VotingConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    votingId: BigNumberish,
    ipfsHash: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    votingId: bigint,
    ipfsHash: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    votingId: bigint;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    executor: AddressLike,
    success: boolean
  ];
  export type OutputTuple = [
    proposalId: bigint,
    executor: string,
    success: boolean
  ];
  export interface OutputObject {
    proposalId: bigint;
    executor: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFHEGovernance extends BaseContract {
  connect(runner?: ContractRunner | null): IFHEGovernance;
  waitForDeployment(): Promise<this>;

  interface: IFHEGovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [
      ipfsHash: string,
      target: AddressLike,
      callData: BytesLike,
      votingConfig: IFHEVoting.VotingConfigStruct
    ],
    [bigint],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [IFHEGovernance.ProposalStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      ipfsHash: string,
      target: AddressLike,
      callData: BytesLike,
      votingConfig: IFHEVoting.VotingConfigStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [IFHEGovernance.ProposalStructOutput],
    "view"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,address,uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,address,bool)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
  };
}
