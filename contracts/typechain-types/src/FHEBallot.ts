/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IFHEVoting {
  export type VotingConfigStruct = {
    name: string;
    description: string;
    voteType: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    quorum: BigNumberish;
    whitelistEnabled: boolean;
    maxVotersCount: BigNumberish;
  };

  export type VotingConfigStructOutput = [
    name: string,
    description: string,
    voteType: bigint,
    startTime: bigint,
    endTime: bigint,
    quorum: bigint,
    whitelistEnabled: boolean,
    maxVotersCount: bigint
  ] & {
    name: string;
    description: string;
    voteType: bigint;
    startTime: bigint;
    endTime: bigint;
    quorum: bigint;
    whitelistEnabled: boolean;
    maxVotersCount: bigint;
  };

  export type VoterInfoStruct = {
    hasVoted: boolean;
    isWhitelisted: boolean;
    votingPower: BigNumberish;
    encryptedChoice: BytesLike;
    voteTimestamp: BigNumberish;
  };

  export type VoterInfoStructOutput = [
    hasVoted: boolean,
    isWhitelisted: boolean,
    votingPower: bigint,
    encryptedChoice: string,
    voteTimestamp: bigint
  ] & {
    hasVoted: boolean;
    isWhitelisted: boolean;
    votingPower: bigint;
    encryptedChoice: string;
    voteTimestamp: bigint;
  };
}

export interface FHEBallotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_OPTIONS"
      | "MAX_VOTERS"
      | "MAX_VOTING_DURATION"
      | "MIN_VOTING_DURATION"
      | "castQuadraticVote"
      | "castVote"
      | "castWeightedVote"
      | "createVoting"
      | "decryptedResults"
      | "decryptionRequestId"
      | "emergencyPause"
      | "emergencyUnpause"
      | "encryptedTotalVotes"
      | "endVoting"
      | "getDecryptedResults"
      | "getTotalVoters"
      | "getTotalVotes"
      | "getVoterInfo"
      | "getVotingConfig"
      | "getVotingOptions"
      | "getVotingStatus"
      | "getWinningOption"
      | "hasVoted"
      | "isQuorumReached"
      | "owner"
      | "paused"
      | "protocolId"
      | "reencryptVote"
      | "registerPublicKey"
      | "renounceOwnership"
      | "requestDecryption"
      | "requestIdToVotingId"
      | "resultsDecrypted"
      | "startVoting"
      | "totalVoters"
      | "transferOwnership"
      | "userPublicKeys"
      | "validProofs"
      | "verifyVoteIntegrity"
      | "voterInfo"
      | "votingConfigs"
      | "votingCounter"
      | "votingCreator"
      | "votingOptions"
      | "votingStatus"
      | "whitelist"
      | "whitelistCount"
      | "whitelistVoters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FHEOperationExecuted"
      | "OwnershipTransferred"
      | "Paused"
      | "ProofVerified"
      | "PublicKeyRegistered"
      | "QuorumReached"
      | "ResultsDecrypted"
      | "Unpaused"
      | "VoteCast"
      | "VoterWhitelisted"
      | "VotingCreated"
      | "VotingStatusChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_OPTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castQuadraticVote",
    values: [BigNumberish, BytesLike[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castWeightedVote",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createVoting",
    values: [IFHEVoting.VotingConfigStruct, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptedResults",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptionRequestId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedTotalVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptedResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingOptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWinningOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuorumReached",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reencryptVote",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPublicKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToVotingId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resultsDecrypted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPublicKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validProofs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVoteIntegrity",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voterInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingOptions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistVoters",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_OPTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_VOTERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castQuadraticVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castWeightedVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptedResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptionRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedTotalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptedResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWinningOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isQuorumReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reencryptVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToVotingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resultsDecrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPublicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyVoteIntegrity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voterInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistVoters",
    data: BytesLike
  ): Result;
}

export namespace FHEOperationExecutedEvent {
  export type InputTuple = [operation: string, gasUsed: BigNumberish];
  export type OutputTuple = [operation: string, gasUsed: bigint];
  export interface OutputObject {
    operation: string;
    gasUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [proofHash: BytesLike, valid: boolean];
  export type OutputTuple = [proofHash: string, valid: boolean];
  export interface OutputObject {
    proofHash: string;
    valid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicKeyRegisteredEvent {
  export type InputTuple = [user: AddressLike, publicKey: BytesLike];
  export type OutputTuple = [user: string, publicKey: string];
  export interface OutputObject {
    user: string;
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumReachedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    totalVotes: BigNumberish,
    quorum: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    totalVotes: bigint,
    quorum: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    totalVotes: bigint;
    quorum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultsDecryptedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    results: BigNumberish[],
    totalVotes: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    results: bigint[],
    totalVotes: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    results: bigint[];
    totalVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    voter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    voter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    voter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterWhitelistedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    voter: AddressLike,
    votingPower: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    voter: string,
    votingPower: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    voter: string;
    votingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingCreatedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    name: string,
    voteType: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    name: string,
    voteType: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    name: string;
    voteType: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStatusChangedEvent {
  export type InputTuple = [
    votingId: BigNumberish,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    votingId: bigint,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    votingId: bigint;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEBallot extends BaseContract {
  connect(runner?: ContractRunner | null): FHEBallot;
  waitForDeployment(): Promise<this>;

  interface: FHEBallotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_OPTIONS: TypedContractMethod<[], [bigint], "view">;

  MAX_VOTERS: TypedContractMethod<[], [bigint], "view">;

  MAX_VOTING_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_VOTING_DURATION: TypedContractMethod<[], [bigint], "view">;

  castQuadraticVote: TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVotes: BytesLike[],
      credits: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [votingId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  castWeightedVote: TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVote: BytesLike,
      weight: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createVoting: TypedContractMethod<
    [
      config: IFHEVoting.VotingConfigStruct,
      optionNames: string[],
      optionDescriptions: string[]
    ],
    [bigint],
    "nonpayable"
  >;

  decryptedResults: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  decryptionRequestId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  encryptedTotalVotes: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  endVoting: TypedContractMethod<
    [votingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDecryptedResults: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTotalVoters: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalVotes: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint],
    "view"
  >;

  getVoterInfo: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike],
    [IFHEVoting.VoterInfoStructOutput],
    "view"
  >;

  getVotingConfig: TypedContractMethod<
    [votingId: BigNumberish],
    [IFHEVoting.VotingConfigStructOutput],
    "view"
  >;

  getVotingOptions: TypedContractMethod<
    [votingId: BigNumberish],
    [string[]],
    "view"
  >;

  getVotingStatus: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint],
    "view"
  >;

  getWinningOption: TypedContractMethod<
    [votingId: BigNumberish],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [votingId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  isQuorumReached: TypedContractMethod<
    [votingId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  reencryptVote: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, publicKey: BytesLike],
    [string],
    "view"
  >;

  registerPublicKey: TypedContractMethod<
    [publicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestDecryption: TypedContractMethod<
    [votingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestIdToVotingId: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  resultsDecrypted: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  startVoting: TypedContractMethod<
    [votingId: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalVoters: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPublicKeys: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  validProofs: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifyVoteIntegrity: TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, proof: BytesLike],
    [boolean],
    "view"
  >;

  voterInfo: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [boolean, boolean, bigint, string, bigint] & {
        hasVoted: boolean;
        isWhitelisted: boolean;
        votingPower: bigint;
        encryptedChoice: string;
        voteTimestamp: bigint;
      }
    ],
    "view"
  >;

  votingConfigs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        name: string;
        description: string;
        voteType: bigint;
        startTime: bigint;
        endTime: bigint;
        quorum: bigint;
        whitelistEnabled: boolean;
        maxVotersCount: bigint;
      }
    ],
    "view"
  >;

  votingCounter: TypedContractMethod<[], [bigint], "view">;

  votingCreator: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  votingOptions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, boolean] & {
        name: string;
        description: string;
        encryptedVoteCount: string;
        active: boolean;
      }
    ],
    "view"
  >;

  votingStatus: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  whitelist: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  whitelistCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  whitelistVoters: TypedContractMethod<
    [
      votingId: BigNumberish,
      voters: AddressLike[],
      votingPowers: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_OPTIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_VOTERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_VOTING_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VOTING_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "castQuadraticVote"
  ): TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVotes: BytesLike[],
      credits: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [votingId: BigNumberish, encryptedVote: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castWeightedVote"
  ): TypedContractMethod<
    [
      votingId: BigNumberish,
      encryptedVote: BytesLike,
      weight: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVoting"
  ): TypedContractMethod<
    [
      config: IFHEVoting.VotingConfigStruct,
      optionNames: string[],
      optionDescriptions: string[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptedResults"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "decryptionRequestId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "encryptedTotalVotes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[votingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDecryptedResults"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalVoters"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalVotes"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterInfo"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike],
    [IFHEVoting.VoterInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingConfig"
  ): TypedContractMethod<
    [votingId: BigNumberish],
    [IFHEVoting.VotingConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingOptions"
  ): TypedContractMethod<[votingId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVotingStatus"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWinningOption"
  ): TypedContractMethod<[votingId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [votingId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isQuorumReached"
  ): TypedContractMethod<[votingId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reencryptVote"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, publicKey: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPublicKey"
  ): TypedContractMethod<[publicKey: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestDecryption"
  ): TypedContractMethod<[votingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestIdToVotingId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "resultsDecrypted"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<[votingId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalVoters"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPublicKeys"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "validProofs"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyVoteIntegrity"
  ): TypedContractMethod<
    [votingId: BigNumberish, voter: AddressLike, proof: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "voterInfo"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [boolean, boolean, bigint, string, bigint] & {
        hasVoted: boolean;
        isWhitelisted: boolean;
        votingPower: bigint;
        encryptedChoice: string;
        voteTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingConfigs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        name: string;
        description: string;
        voteType: bigint;
        startTime: bigint;
        endTime: bigint;
        quorum: bigint;
        whitelistEnabled: boolean;
        maxVotersCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingCreator"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "votingOptions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, boolean] & {
        name: string;
        description: string;
        encryptedVoteCount: string;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingStatus"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "whitelistCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistVoters"
  ): TypedContractMethod<
    [
      votingId: BigNumberish,
      voters: AddressLike[],
      votingPowers: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FHEOperationExecuted"
  ): TypedContractEvent<
    FHEOperationExecutedEvent.InputTuple,
    FHEOperationExecutedEvent.OutputTuple,
    FHEOperationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "PublicKeyRegistered"
  ): TypedContractEvent<
    PublicKeyRegisteredEvent.InputTuple,
    PublicKeyRegisteredEvent.OutputTuple,
    PublicKeyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "QuorumReached"
  ): TypedContractEvent<
    QuorumReachedEvent.InputTuple,
    QuorumReachedEvent.OutputTuple,
    QuorumReachedEvent.OutputObject
  >;
  getEvent(
    key: "ResultsDecrypted"
  ): TypedContractEvent<
    ResultsDecryptedEvent.InputTuple,
    ResultsDecryptedEvent.OutputTuple,
    ResultsDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterWhitelisted"
  ): TypedContractEvent<
    VoterWhitelistedEvent.InputTuple,
    VoterWhitelistedEvent.OutputTuple,
    VoterWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "VotingCreated"
  ): TypedContractEvent<
    VotingCreatedEvent.InputTuple,
    VotingCreatedEvent.OutputTuple,
    VotingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStatusChanged"
  ): TypedContractEvent<
    VotingStatusChangedEvent.InputTuple,
    VotingStatusChangedEvent.OutputTuple,
    VotingStatusChangedEvent.OutputObject
  >;

  filters: {
    "FHEOperationExecuted(string,uint256)": TypedContractEvent<
      FHEOperationExecutedEvent.InputTuple,
      FHEOperationExecutedEvent.OutputTuple,
      FHEOperationExecutedEvent.OutputObject
    >;
    FHEOperationExecuted: TypedContractEvent<
      FHEOperationExecutedEvent.InputTuple,
      FHEOperationExecutedEvent.OutputTuple,
      FHEOperationExecutedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProofVerified(bytes32,bool)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;

    "PublicKeyRegistered(address,bytes32)": TypedContractEvent<
      PublicKeyRegisteredEvent.InputTuple,
      PublicKeyRegisteredEvent.OutputTuple,
      PublicKeyRegisteredEvent.OutputObject
    >;
    PublicKeyRegistered: TypedContractEvent<
      PublicKeyRegisteredEvent.InputTuple,
      PublicKeyRegisteredEvent.OutputTuple,
      PublicKeyRegisteredEvent.OutputObject
    >;

    "QuorumReached(uint256,uint256,uint256)": TypedContractEvent<
      QuorumReachedEvent.InputTuple,
      QuorumReachedEvent.OutputTuple,
      QuorumReachedEvent.OutputObject
    >;
    QuorumReached: TypedContractEvent<
      QuorumReachedEvent.InputTuple,
      QuorumReachedEvent.OutputTuple,
      QuorumReachedEvent.OutputObject
    >;

    "ResultsDecrypted(uint256,uint256[],uint256)": TypedContractEvent<
      ResultsDecryptedEvent.InputTuple,
      ResultsDecryptedEvent.OutputTuple,
      ResultsDecryptedEvent.OutputObject
    >;
    ResultsDecrypted: TypedContractEvent<
      ResultsDecryptedEvent.InputTuple,
      ResultsDecryptedEvent.OutputTuple,
      ResultsDecryptedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterWhitelisted(uint256,address,uint256)": TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;
    VoterWhitelisted: TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;

    "VotingCreated(uint256,string,uint8,uint256,uint256)": TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;
    VotingCreated: TypedContractEvent<
      VotingCreatedEvent.InputTuple,
      VotingCreatedEvent.OutputTuple,
      VotingCreatedEvent.OutputObject
    >;

    "VotingStatusChanged(uint256,uint8,uint8)": TypedContractEvent<
      VotingStatusChangedEvent.InputTuple,
      VotingStatusChangedEvent.OutputTuple,
      VotingStatusChangedEvent.OutputObject
    >;
    VotingStatusChanged: TypedContractEvent<
      VotingStatusChangedEvent.InputTuple,
      VotingStatusChangedEvent.OutputTuple,
      VotingStatusChangedEvent.OutputObject
    >;
  };
}
