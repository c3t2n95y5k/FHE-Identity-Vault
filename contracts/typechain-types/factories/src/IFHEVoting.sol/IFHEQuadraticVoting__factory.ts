/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IFHEQuadraticVoting,
  IFHEQuadraticVotingInterface,
} from "../../../src/IFHEVoting.sol/IFHEQuadraticVoting";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "creditsUsed",
        type: "uint256",
      },
    ],
    name: "CreditsAllocated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalVotes",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quorum",
        type: "uint256",
      },
    ],
    name: "QuorumReached",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "results",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalVotes",
        type: "uint256",
      },
    ],
    name: "ResultsDecrypted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "VoteCast",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "votingPower",
        type: "uint256",
      },
    ],
    name: "VoterWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "enum IFHEVoting.VoteType",
        name: "voteType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
    ],
    name: "VotingCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IFHEVoting.VotingStatus",
        name: "oldStatus",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "enum IFHEVoting.VotingStatus",
        name: "newStatus",
        type: "uint8",
      },
    ],
    name: "VotingStatusChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "credits",
        type: "uint256",
      },
    ],
    name: "allocateCredits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votes",
        type: "uint256",
      },
    ],
    name: "calculateQuadraticCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "externalEuint32[]",
        name: "encryptedVotes",
        type: "bytes32[]",
      },
      {
        internalType: "uint256[]",
        name: "credits",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "castQuadraticVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "externalEuint32",
        name: "encryptedVote",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "castVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "externalEuint32",
        name: "encryptedVote",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "castWeightedVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "enum IFHEVoting.VoteType",
            name: "voteType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quorum",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "whitelistEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "maxVotersCount",
            type: "uint256",
          },
        ],
        internalType: "struct IFHEVoting.VotingConfig",
        name: "config",
        type: "tuple",
      },
      {
        internalType: "string[]",
        name: "optionNames",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "optionDescriptions",
        type: "string[]",
      },
    ],
    name: "createVoting",
    outputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "endVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "getDecryptedResults",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "getTotalVoters",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "getVoterCredits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "getVoterInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isWhitelisted",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "votingPower",
            type: "uint256",
          },
          {
            internalType: "euint32",
            name: "encryptedChoice",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "voteTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct IFHEVoting.VoterInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "getVotingConfig",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "enum IFHEVoting.VoteType",
            name: "voteType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quorum",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "whitelistEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "maxVotersCount",
            type: "uint256",
          },
        ],
        internalType: "struct IFHEVoting.VotingConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "getVotingStatus",
    outputs: [
      {
        internalType: "enum IFHEVoting.VotingStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "getWinningOption",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "isQuorumReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "publicKey",
        type: "bytes32",
      },
    ],
    name: "reencryptVote",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "requestDecryption",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
    ],
    name: "startVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyVoteIntegrity",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "votingId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "voters",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "votingPowers",
        type: "uint256[]",
      },
    ],
    name: "whitelistVoters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IFHEQuadraticVoting__factory {
  static readonly abi = _abi;
  static createInterface(): IFHEQuadraticVotingInterface {
    return new Interface(_abi) as IFHEQuadraticVotingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IFHEQuadraticVoting {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IFHEQuadraticVoting;
  }
}
