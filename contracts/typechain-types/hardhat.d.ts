/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "EthereumConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumConfig__factory>;
    getContractFactory(
      name: "SepoliaConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SepoliaConfig__factory>;
    getContractFactory(
      name: "FHE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHE__factory>;
    getContractFactory(
      name: "IDecryptionOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDecryptionOracle__factory>;
    getContractFactory(
      name: "IKMSVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKMSVerifier__factory>;
    getContractFactory(
      name: "IACL",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACL__factory>;
    getContractFactory(
      name: "IFHEVMExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFHEVMExecutor__factory>;
    getContractFactory(
      name: "IInputVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInputVerifier__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "FHEBallot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHEBallot__factory>;
    getContractFactory(
      name: "FHEIdentityVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHEIdentityVault__factory>;
    getContractFactory(
      name: "FHEQuadraticVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHEQuadraticVoting__factory>;
    getContractFactory(
      name: "FHEVotingBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FHEVotingBase__factory>;
    getContractFactory(
      name: "IFHEGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFHEGovernance__factory>;
    getContractFactory(
      name: "IFHEQuadraticVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFHEQuadraticVoting__factory>;
    getContractFactory(
      name: "IFHEVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFHEVoting__factory>;

    getContractAt(
      name: "EthereumConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumConfig>;
    getContractAt(
      name: "SepoliaConfig",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SepoliaConfig>;
    getContractAt(
      name: "FHE",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FHE>;
    getContractAt(
      name: "IDecryptionOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDecryptionOracle>;
    getContractAt(
      name: "IKMSVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKMSVerifier>;
    getContractAt(
      name: "IACL",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IACL>;
    getContractAt(
      name: "IFHEVMExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFHEVMExecutor>;
    getContractAt(
      name: "IInputVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInputVerifier>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "FHEBallot",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FHEBallot>;
    getContractAt(
      name: "FHEIdentityVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FHEIdentityVault>;
    getContractAt(
      name: "FHEQuadraticVoting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FHEQuadraticVoting>;
    getContractAt(
      name: "FHEVotingBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FHEVotingBase>;
    getContractAt(
      name: "IFHEGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFHEGovernance>;
    getContractAt(
      name: "IFHEQuadraticVoting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFHEQuadraticVoting>;
    getContractAt(
      name: "IFHEVoting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFHEVoting>;

    deployContract(
      name: "EthereumConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumConfig>;
    deployContract(
      name: "SepoliaConfig",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SepoliaConfig>;
    deployContract(
      name: "FHE",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHE>;
    deployContract(
      name: "IDecryptionOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDecryptionOracle>;
    deployContract(
      name: "IKMSVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKMSVerifier>;
    deployContract(
      name: "IACL",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IACL>;
    deployContract(
      name: "IFHEVMExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVMExecutor>;
    deployContract(
      name: "IInputVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInputVerifier>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "FHEBallot",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEBallot>;
    deployContract(
      name: "FHEIdentityVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEIdentityVault>;
    deployContract(
      name: "FHEQuadraticVoting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEQuadraticVoting>;
    deployContract(
      name: "FHEVotingBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEVotingBase>;
    deployContract(
      name: "IFHEGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEGovernance>;
    deployContract(
      name: "IFHEQuadraticVoting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEQuadraticVoting>;
    deployContract(
      name: "IFHEVoting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVoting>;

    deployContract(
      name: "EthereumConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EthereumConfig>;
    deployContract(
      name: "SepoliaConfig",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SepoliaConfig>;
    deployContract(
      name: "FHE",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHE>;
    deployContract(
      name: "IDecryptionOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDecryptionOracle>;
    deployContract(
      name: "IKMSVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKMSVerifier>;
    deployContract(
      name: "IACL",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IACL>;
    deployContract(
      name: "IFHEVMExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVMExecutor>;
    deployContract(
      name: "IInputVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInputVerifier>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "FHEBallot",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEBallot>;
    deployContract(
      name: "FHEIdentityVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEIdentityVault>;
    deployContract(
      name: "FHEQuadraticVoting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEQuadraticVoting>;
    deployContract(
      name: "FHEVotingBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FHEVotingBase>;
    deployContract(
      name: "IFHEGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEGovernance>;
    deployContract(
      name: "IFHEQuadraticVoting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEQuadraticVoting>;
    deployContract(
      name: "IFHEVoting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFHEVoting>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
